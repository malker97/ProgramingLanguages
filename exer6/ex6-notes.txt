1. For each scope, list its bound and unbound variables.
scope       0           1       2           3
bound       a_0         a_1     a_1,b,c     a,b,c
unbound     b,c         b,c     null        null
2. Can you predict the output of this program? Compile and run this program to confirm your prediction.
the output should be a=2,b=1,c=3
cuz a is the a in the scope 2, a = 2, b = a(scope 1), c is a + b = 3
```bash
zhengmao@ada:~/Documents/ProgramingLanguages/exer6$ ./a.out 
a=2,b=1,c=3
```
3. Rewrite this program in Scala; call it Scope.scala. Your Scala program should faithfully preserve the nesting structure of the scopes and the bound and unbound variables in each scope.
```scala
// Author: Zhengmao Zhang
// int main(){
//     int a = 0;
//     { 
//         int a = 1;
//         { 
//             int b = a;
//             int a = 2;
//             int c = a;
//                 {
//                     int c=a+b; 
//                     printf("a=%d,b=%d,c=%d\n", a, b, c);
//                 }
//         }
//     }
//     return 0;
// }
object Scope {
    def main(args: Array[String]) = {
        var a = 0
        {
            var a = 1
            {
                var b = a
                var a = 2
                var c = a
                {
                    var c = a + b
                    println("a=" + a + ",b=" + b + ",c=" + c)
                }
            }
        }
    }
}
```
4. Does your program compile and run? If not, find a simple fix without renaming the variables or altering the bound and unbound variable settings.
```scala
// Author: Zhengmao Zhang
// int main(){
//     int a = 0;
//     { 
//         int a = 1;
//         { 
//             int b = a;
//             int a = 2;
//             int c = a;
//                 {
//                     int c=a+b; 
//                     printf("a=%d,b=%d,c=%d\n", a, b, c);
//                 }
//         }
//     }
//     return 0;
// }
object Scope {
    def main(args: Array[String]) = {
        var flag = true
        var a = 0
        if(flag){
            var a = 1
            var temp = a
            if(flag){
                var b = temp
                var a = 2
                var c = a
                if(flag){
                    var c = a + b
                    println("a=" + a + ",b=" + b + ",c=" + c)
                }
            }
        }
    }
}
```
```
zhengmao@ada:~/Documents/ProgramingLanguages/exer6$ scala Scope
a=2,b=1,c=3
```
5. Do the same in Java; call your program Scope2.java. Does it work? Can you fix it? If not, provide a convincing reason.
```Java
class Scope2 {
    public static void main(String[] args) {
        int a = 0;
        { 
            int a = 1;
            { 
                int b = a;
                int a = 2;
                int c = a;
                    {
                        int c=a+b; 
                        System.out.println("a="+a+",b="+b+",c="+c);
                    }
            }
        }
    }
}
```
No, because Java's management mechanism prevents the occurrence of variable names. If you really want to modify it, you must assign temp values to store the corresponding a,b,c

1. What does the program print under call-by-value semantics?
0 1
1 0
2. What does the program print under call-by-reference semantics?
1 0
0 1
3. Now suppose that objects of class P are not boxed, and the semantics of assignment are adjusted appropriately. Now what does the program print under call-by-value semantics?
0 1
0 1
